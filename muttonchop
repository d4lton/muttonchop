#!/usr/bin/env node

// =================================================================================================
//
// MuttonChop v2.0.0
// Nanigans, Inc.
// Copyright Â©2018, All Rights Reserved
//
// =================================================================================================

const fs = require('fs');
const meow = require('meow');
const http = require('http');
const url = require("url");
const syncrequest = require('sync-request');
const MuttonChop = require('./lib/MuttonChop/MuttonChop.js');

const version = '2.0.0';

var debug = false;

var daemonOptions = {
  outFile: 'server.out',
  errFile: 'server.err',
  max: 3
};

/**
 * Show or return program usage. Exit the program if showing usage.
 * @param exit {boolean} If true, show the usage on stdout and exit the program, otherwise just return usage (for meow, mainly).
 * @returns {string} The program usage (if exit is not true)
 */
function usage(exit) {
  const usage = 'usage: $ muttonchop [--webroot <directory-name>] [--port <port>] [--index <index-file-path>] [--datafile <data-file-path>] [--output <html-output-path>]';
  if (exit) {
    console.log(usage);
    process.exit(1);
  } else {
    return usage;
  }
}

const cli = meow(usage(), {
  flags: {
    webroot: {
      type: 'string',
      default: process.cwd() + '/webroot'
    },
    output: {
      type: 'string',
      default: process.cwd() + '/output'
    },
    port: {
      type: 'string',
      default: '8080'
    },
    index: {
      type: 'string',
      default: 'index.template'
    },
    datafile: {
      type: 'string'
    }
  }
});

if (!cli.flags.webroot) { usage(true); }

const port = parseInt(cli.flags.port);
const serverUrl = 'http://localhost:' + port;

/**
 * Send a standardized HTTP response.
 * @param response {object} The HTTP response object
 * @param code {number} The HTTP result code
 * @param message {string} The response body
 */
function sendResponse(response, code, message) {
  response.writeHead(code);
  response.write(message);
  response.end();
}

function getData(data) {
  var data = data || {};
  data.debug = debug;
  if (cli.flags.datafile) {
    try {
      var json = fs.readFileSync(cli.flags.datafile);
      data = Object.assign(data, JSON.parse(json));
    } catch (error) {
      console.log(error);
    }
  }
  return data;
}

function constructHtmlFromTemplate(pathname, data) {
  try {
    data = getData(data);
    var template = fs.readFileSync(pathname).toString();
    var renderer = new MuttonChop(template);
    return renderer.render(data);
  } catch (error) {
    console.log(error.message);
  }
}

function sendIndex(request, response) {
  try {
    fs.readdir('.', function(error, items) {
      if (error) {
        sendResponse(response, 500, error.toString());
      } else {
        var templates = items.map(function(item) {
          if (item !== cli.flags.index && item.indexOf('.template') !== -1) { return {pathname: item}; }
        }).filter(function(it) {return it;});
        var html = constructHtmlFromTemplate(cli.flags.index, {templates: templates});
        sendResponse(response, 200, html);
      }
    });
  } catch (error) {
    console.log(error);
    sendResponse(response, 404, error.message);
  }
}

function sendHtml(request, response, pathname) {
  // build HTML from pathname as the main template
  var html = constructHtmlFromTemplate(pathname);
  if (html) {
    pathname = pathname.replace('.template', '.html');
    fs.writeFileSync(cli.flags.output + '/' + pathname, html);
    sendResponse(response, 200, html);
  } else {
    sendResponse(response, 404, 'Not Found');
  }
}

//
// Start HTTP server
//

console.log('MuttonChop v' + version + ' started.');
console.log('  URL: ' + serverUrl);
console.log('  webroot: ' + cli.flags.webroot);

process.chdir(cli.flags.webroot);

http.createServer(function(request, response) {

  const requestUrl = url.parse(request.url, true);
  var pathname = requestUrl.pathname;
  var query = requestUrl.query;

  if (query.debug) {
    debug = true;
  } else {
    debug = false;
  }

  if (pathname === '/') {
    sendIndex(request, response);
  } else if (pathname.indexOf('..') !== -1) {
    sendResponse(response, 400, 'Not Found');
  } else {
    pathname = pathname.replace(/^\//, '');
    sendHtml(request, response, pathname);
  }

}).listen(port);
